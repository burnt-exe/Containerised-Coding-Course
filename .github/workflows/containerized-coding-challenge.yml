name: Containerized Coding Challenge

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  stage-1:
    name: Stage 1 - Introduction to Docker
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io

    - name: Pull Nginx image
      run: docker pull nginx

    - name: Run Nginx container
      run: docker run -d -p 80:80 --name nginx-container nginx

    - name: List running containers
      run: docker ps

    - name: Stop Nginx container
      run: docker stop nginx-container

    - name: Remove Nginx container
      run: docker rm nginx-container

    - name: Update README for Stage 2
      run: |
        echo "# Containerized Coding Challenge" > README.md
        echo "## Current Stage: 2 - Building Docker Images" >> README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README for Stage 2"
        git push origin main

  stage-2:
    name: Stage 2 - Building Docker Images
    runs-on: ubuntu-latest
    needs: stage-1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Write Dockerfile
      run: |
        echo 'FROM ubuntu:latest' > Dockerfile
        echo 'CMD ["echo", "Hello, World!"]' >> Dockerfile

    - name: Build Docker image
      run: docker build -t hello-world .

    - name: Run Docker container
      run: docker run hello-world

    - name: Login to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

    - name: Tag and push Docker image
      run: |
        docker tag hello-world $DOCKER_USERNAME/hello-world
        docker push $DOCKER_USERNAME/hello-world

    - name: Update README for Stage 3
      run: |
        echo "# Containerized Coding Challenge" > README.md
        echo "## Current Stage: 3 - Docker Compose" >> README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README for Stage 3"
        git push origin main

  stage-3:
    name: Stage 3 - Docker Compose
    runs-on: ubuntu-latest
    needs: stage-2

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Write docker-compose.yml
      run: |
        echo 'version: "3"' > docker-compose.yml
        echo 'services:' >> docker-compose.yml
        echo '  web:' >> docker-compose.yml
        echo '    image: nginx' >> docker-compose.yml
        echo '    ports:' >> docker-compose.yml
        echo '      - "80:80"' >> docker-compose.yml

    - name: Run Docker Compose
      run: docker-compose up -d

    - name: List running containers
      run: docker ps

    - name: Update README for Stage 4
      run: |
        echo "# Containerized Coding Challenge" > README.md
        echo "## Current Stage: 4 - Creating a Web Application" >> README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README for Stage 4"
        git push origin main

  stage-4:
    name: Stage 4 - Creating a Web Application
    runs-on: ubuntu-latest
    needs: stage-3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up project directory structure
      run: |
        mkdir -p web-drive/backend
        mkdir -p web-drive/frontend/public
        mkdir -p web-drive/frontend/src

    - name: Populate backend directory
      run: |
        echo 'from flask import Flask, jsonify, request' > web-drive/backend/app.py
        echo 'import os' >> web-drive/backend/app.py
        echo '' >> web-drive/backend/app.py
        echo 'app = Flask(__name__)' >> web-drive/backend/app.py
        echo '' >> web-drive/backend/app.py
        echo '@app.route("/files", methods=["GET"])' >> web-drive/backend/app.py
        echo 'def list_files():' >> web-drive/backend/app.py
        echo '    files = os.listdir("/data")' >> web-drive/backend/app.py
        echo '    return jsonify(files)' >> web-drive/backend/app.py
        echo '' >> web-drive/backend/app.py
        echo '@app.route("/upload", methods=["POST"])' >> web-drive/backend/app.py
        echo 'def upload_file():' >> web-drive/backend/app.py
        echo '    if "file" not in request.files:' >> web-drive/backend/app.py
        echo '        return "No file part", 400' >> web-drive/backend/app.py
        echo '    file = request.files["file"]' >> web-drive/backend/app.py
        echo '    file.save(os.path.join("/data", file.filename))' >> web-drive/backend/app.py
        echo '    return "File uploaded", 200' >> web-drive/backend/app.py
        echo '' >> web-drive/backend/app.py
        echo 'if __name__ == "__main__":' >> web-drive/backend/app.py
        echo '    app.run(host="0.0.0.0", port=5000)' >> web-drive/backend/app.py

        echo 'Flask' > web-drive/backend/requirements.txt

        echo 'FROM python:3.9-slim' > web-drive/backend/Dockerfile
        echo 'WORKDIR /app' >> web-drive/backend/Dockerfile
        echo 'COPY requirements.txt .' >> web-drive/backend/Dockerfile
        echo 'RUN pip install --no-cache-dir -r requirements.txt' >> web-drive/backend/Dockerfile
        echo 'COPY . .' >> web-drive/backend/Dockerfile
        echo 'RUN mkdir -p /data' >> web-drive/backend/Dockerfile
        echo 'EXPOSE 5000' >> web-drive/backend/Dockerfile
        echo 'CMD ["python", "app.py"]' >> web-drive/backend/Dockerfile

    - name: Populate frontend directory
      run: |
        echo '{
  "name": "web-drive-frontend",
  "version": "1.0.0",
  "main": "src/index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "4.0.0"
  }
}' > web-drive/frontend/package.json

        echo 'FROM node:14-slim' > web-drive/frontend/Dockerfile
        echo 'WORKDIR /app' >> web-drive/frontend/Dockerfile
        echo 'COPY package*.json ./' >> web-drive/frontend/Dockerfile
        echo 'RUN npm install' >> web-drive/frontend/Dockerfile
        echo 'COPY . .' >> web-drive/frontend/Dockerfile
        echo 'RUN npm run build' >> web-drive/frontend/Dockerfile
        echo 'EXPOSE 3000' >> web-drive/frontend/Dockerfile
        echo 'CMD ["npm", "start"]' >> web-drive/frontend/Dockerfile

        echo '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Drive</title>
</head>
<body>
    <div id="root"></div>
    <script src="/src/App.js"></script>
</body>
</html>' > web-drive/frontend/public/index.html

        echo 'import React, { useState } from "react";

function App() {
    const [files, setFiles] = useState([]);
    const [selectedFile, setSelectedFile] = useState(null);

    const fetchFiles = async () => {
        const response = await fetch("/api/files");
        const files = await response.json();
        setFiles(files);
    };

    const uploadFile = async () => {
        const formData = new FormData();
        formData.append("file", selectedFile);

        await fetch("/api/upload", {
            method: "POST",
            body: formData
        });

        fetchFiles();
    };

    return (
        <div>
            <h1>Web Drive</h1>
            <input type="file" onChange={e => setSelectedFile(e.target.files[0])} />
            <button onClick={uploadFile}>Upload</button>
            <button onClick={fetchFiles}>Refresh</button>
            <ul>
                {files.map(file => (
                    <li key={file}>{file}</li>
                ))}
            </ul>
        </div>
    );
}

export default App;' > web-drive/frontend/src/App.js

    - name: Create docker-compose file
      run: |
        echo 'version: "3"

services:
  backend:
    build: ./backend
    volumes:
      - data:/data
    ports:
      - "5000:5000"

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:5000

volumes:
  data:' > web-drive/docker-compose.yml

    - name: Update README for Stage 5
      run: |
        echo "# Containerized Coding Challenge" > README.md
        echo "## Current Stage: 5 - Persistent Data" >> README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README for Stage 5"
        git push origin main

  stage-5:
    name: Stage 5 - Persistent Data
    runs-on: ubuntu-latest
    needs: stage-4

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run Docker Compose with volume
      run: docker-compose up -d

    - name: Verify data persistence
      run: |
        echo "Test data" > test.txt
        docker cp test.txt $(docker-compose ps -q backend):/data/test.txt
        docker-compose down
        docker-compose up -d
        docker cp $(docker-compose ps -q backend):/data/test.txt test.txt
        if [ "$(cat test.txt)" != "Test data" ]; then exit 1; fi

    - name: Update README for Stage 6
      run: |
        echo "# Containerized Coding Challenge" > README.md
        echo "## Current Stage: 6 - CI/CD with GitHub Actions" >> README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README for Stage 6"
        git push origin main

  stage-6:
    name: Stage 6 - CI/CD with GitHub Actions
    runs-on: ubuntu-latest
    needs: stage-5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build and push backend Docker image
      run: |
        cd web-drive/backend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/web-drive-backend .
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/web-drive-backend

    - name: Build and push frontend Docker image
      run: |
        cd web-drive/frontend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/web-drive-frontend .
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/web-drive-frontend

    - name: Deploy application
      run: docker-compose up -d

    - name: Update README for Completion
      run: |
        echo "# Containerized Coding Challenge" > README.md
        echo "## Current Stage: Completed" >> README.md
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update README for Completion"
        git push origin main
